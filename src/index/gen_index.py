import urllib
import sys

SINGLE_BYTE_INDICES = [
    'ibm866',
    'iso-8859-2',
    'iso-8859-3',
    'iso-8859-4',
    'iso-8859-5',
    'iso-8859-6',
    'iso-8859-7',
    'iso-8859-8',
    'iso-8859-10',
    'iso-8859-13',
    'iso-8859-14',
    'iso-8859-15',
    'iso-8859-16',
    'koi8-r',
    'koi8-u',
    'macintosh',
    'windows-874',
    'windows-1250',
    'windows-1251',
    'windows-1252',
    'windows-1253',
    'windows-1254',
    'windows-1255',
    'windows-1256',
    'windows-1257',
    'windows-1258',
    'x-mac-cyrillic',
]

def write_comma_separated(f, prefix, l, width=80):
    buffered = ''
    for i in l:
        i = str(i)
        if len(prefix) + len(buffered) + len(i) <= width:
            buffered += i
        else:
            print >>f, prefix + buffered.rstrip()
            buffered = i
    if buffered:
        print >>f, prefix + buffered.rstrip()

def generate_single_byte_index(name):
    data = [None] * 128
    comments = []
    for line in urllib.urlopen('http://encoding.spec.whatwg.org/index-%s.txt' % name):
        line = line.strip()
        if not line: continue
        if line.startswith('#'):
            comments.append('//' + line[1:])
            continue
        key, value, _ = line.split(None, 2)
        key = int(key, 0)
        value = int(value, 0)
        assert 0 <= key < 128 and 0 <= value < 0x10000 and data[key] is None
        data[key] = value
    with open('%s.rs' % name.replace('-', '_'), 'w') as f:
        print >>f, '// AUTOGENERATED FROM index-%s.txt, ORIGINAL COMMENT FOLLOWS:' % name
        print >>f, '//'
        for line in comments:
            print >>f, line
        print >>f
        print >>f, "static FORWARD_TABLE: &'static [u16] = &["
        write_comma_separated(f, '    ',
            ['%d, ' % (0xffff if value is None else value) for value in data])
        print >>f, '];'
        print >>f
        print >>f, '#[inline]'
        print >>f, 'pub fn forward(code: u8) -> u16 {'
        print >>f, '    FORWARD_TABLE[code as uint]'
        print >>f, '}'
        print >>f
        print >>f, '#[inline]'
        print >>f, 'pub fn backward(code: u16) -> u8 {'
        print >>f, '    match code {'
        write_comma_separated(f, '        ',
            ['%d => %d, ' % (value, i) for i, value in enumerate(data) if value is not None] +
            ['_ => 255'])
        print >>f, '    }'
        print >>f, '}'

for index in SINGLE_BYTE_INDICES:
    print >>sys.stderr, 'generating index %s...' % index
    generate_single_byte_index(index)

